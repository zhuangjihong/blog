<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用vercel做一个Google镜像站</title>
    <link href="/2024/10/05/mirror-google/"/>
    <url>/2024/10/05/mirror-google/</url>
    
    <content type="html"><![CDATA[<h1>前置准备</h1><ul><li>一个 vercel 账号</li><li>一个 github 账号</li><li>能够确保你流畅访问以上两个网站的工具</li><li>一个域名</li><li>一个 cloudflare 账号</li></ul><h1>域名</h1><p>参考我的一期文章。<br><a href="https://blog.csdn.net/Zyr556677/article/details/141131614?spm=1001.2014.3001.5501">如何免费白嫖一个域名？</a></p><h1>Fork</h1><p>前往 github，fork 这个仓库：<a href="https://github.com/gaowanlu/google">google</a></p><h1>vercel</h1><p>打开 vercel，导入你刚刚 fork 的仓库。<br><img src="https://s21.ax1x.com/2024/08/15/pA96KQP.png" alt=""><br>点击 <code>Settings</code> -&gt; <code>Domains</code>，把你的域名添加进来，如果错误了，就前往 CloudFlare（如果你是看我上一期文章的话）。添加 DNS 记录，</p><p><img src="https://s21.ax1x.com/2024/08/15/pA96tWn.png" alt=""><br>刷新一下就好了，如果网站打不开，请把自己的 SSL/TLS 加密模式改为 完全。</p>]]></content>
    
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用cloudflare workers反代github</title>
    <link href="/2024/10/05/mirror-github/"/>
    <url>/2024/10/05/mirror-github/</url>
    
    <content type="html"><![CDATA[<h1>如果你懒</h1><p>我做了一个<a href="https://hub.volatiles.us.kg/">镜像站</a>，自取不谢。</p><h1>如果你吃饱了撑着</h1><p>就跟我一起做。</p><h2 id="打开-cloudflare">打开 cloudflare</h2><p><a href="https://imgse.com/i/pApPLZV"><img src="https://s21.ax1x.com/2024/08/11/pApPLZV.png" alt="pApPLZV.png"></a><br><s>这一步不会有人不会吧</s></p><p>菜单下拉点击 <code>Workers 和 Pages</code>（如果你是简体中文的话）,</p><p><a href="https://imgse.com/i/pApPOaT"><img src="https://s21.ax1x.com/2024/08/11/pApPOaT.png" alt="pApPOaT.png"></a></p><p>我这里已经创建过一个了，点击 <code>创建</code>。</p><p><a href="https://imgse.com/i/pApP7Mn"><img src="https://s21.ax1x.com/2024/08/11/pApP7Mn.png" alt="pApP7Mn.png"></a></p><p>没创建过就是这样子，点击 <code>创建 Worker</code>。</p><p><a href="https://imgse.com/i/pApPHrq"><img src="https://s21.ax1x.com/2024/08/11/pApPHrq.png" alt="pApPHrq.png"></a></p><p>这里不用管直接点击 <code>部署</code>。我懒得在建一个直接看建过的也一样。</p><p><a href="https://imgse.com/i/pApPbq0"><img src="https://s21.ax1x.com/2024/08/11/pApPbq0.png" alt="pApPbq0.png"></a></p><p>点击 <code>编辑代码</code>。进去等代码加载好。</p><p><a href="https://imgse.com/i/pApPviF"><img src="https://s21.ax1x.com/2024/08/11/pApPviF.png" alt="pApPviF.png"></a></p><p>把代码改成这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> upstream = <span class="hljs-string">&#x27;github.com&#x27;</span><br><span class="hljs-keyword">const</span> upstream_path = <span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-keyword">const</span> upstream_mobile = <span class="hljs-string">&#x27;github.com&#x27;</span><br><span class="hljs-keyword">const</span> blocked_region = [<span class="hljs-string">&#x27;KP&#x27;</span>, <span class="hljs-string">&#x27;SY&#x27;</span>, <span class="hljs-string">&#x27;PK&#x27;</span>, <span class="hljs-string">&#x27;CU&#x27;</span>]<br><span class="hljs-keyword">const</span> blocked_ip_address = [<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>]<br><span class="hljs-keyword">const</span> https = <span class="hljs-literal">true</span><br><span class="hljs-keyword">const</span> replace_dict = &#123;<span class="hljs-string">&#x27;$upstream&#x27;</span>: <span class="hljs-string">&#x27;$custom_domain&#x27;</span>, <span class="hljs-string">&#x27;//github.com&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">fetchAndApply</span>(event.<span class="hljs-property">request</span>))<br>&#125;)<br> <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchAndApply</span>(<span class="hljs-params">request</span>) &#123;<br>  <span class="hljs-keyword">const</span> region = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;cf-ipcountry&#x27;</span>).<span class="hljs-title function_">toUpperCase</span>()<br>  <span class="hljs-keyword">const</span> ip_address = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;cf-connecting-ip&#x27;</span>)<br>  <span class="hljs-keyword">const</span> user_agent = request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;user-agent&#x27;</span>)<br> <br>  <span class="hljs-keyword">let</span> response = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>)<br>  <span class="hljs-keyword">let</span> url_hostname = url.<span class="hljs-property">hostname</span><br> <br>  <span class="hljs-keyword">if</span> (https == <span class="hljs-literal">true</span>) &#123;<br>    url.<span class="hljs-property">protocol</span> = <span class="hljs-string">&#x27;https:&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    url.<span class="hljs-property">protocol</span> = <span class="hljs-string">&#x27;http:&#x27;</span><br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">device_status</span>(user_agent)) &#123;<br>    <span class="hljs-keyword">var</span> upstream_domain = upstream<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> upstream_domain = upstream_mobile<br>  &#125;<br> <br>  url.<span class="hljs-property">host</span> = upstream_domain<br>  <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>    url.<span class="hljs-property">pathname</span> = upstream_path<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    url.<span class="hljs-property">pathname</span> = upstream_path + url.<span class="hljs-property">pathname</span><br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (blocked_region.<span class="hljs-title function_">includes</span>(region)) &#123;<br>    response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">403</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (blocked_ip_address.<span class="hljs-title function_">includes</span>(ip_address)) &#123;<br>    response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">403</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> method = request.<span class="hljs-property">method</span><br>    <span class="hljs-keyword">let</span> request_headers = request.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">let</span> new_request_headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(request_headers)<br> <br>    new_request_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Host&#x27;</span>, url.<span class="hljs-property">hostname</span>)<br>    new_request_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Referer&#x27;</span>, url.<span class="hljs-property">hostname</span>)<br> <br>    <span class="hljs-keyword">let</span> original_response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url.<span class="hljs-property">href</span>, &#123;<br>            <span class="hljs-attr">method</span>: method,<br>            <span class="hljs-attr">headers</span>: new_request_headers<br>    &#125;)<br> <br>    <span class="hljs-keyword">let</span> original_response_clone = original_response.<span class="hljs-title function_">clone</span>()<br>    <span class="hljs-keyword">let</span> original_text = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">let</span> response_headers = original_response.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">let</span> new_response_headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(response_headers)<br>    <span class="hljs-keyword">let</span> status = original_response.<span class="hljs-property">status</span><br> <br>    new_response_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    new_response_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="hljs-literal">true</span>)<br>    new_response_headers.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>    new_response_headers.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>    new_response_headers.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br>    <br>    <span class="hljs-keyword">const</span> content_type = new_response_headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (content_type.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)) &#123;<br>      original_text = <span class="hljs-keyword">await</span> <span class="hljs-title function_">replace_response_text</span>(original_response_clone, upstream_domain, url_hostname)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      original_text = original_response_clone.<span class="hljs-property">body</span><br>    &#125;<br> <br>    response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(original_text, &#123;<br>      status,<br>      <span class="hljs-attr">headers</span>: new_response_headers<br>    &#125;)<br>  &#125;<br>  <span class="hljs-keyword">return</span> response<br>&#125;<br> <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">replace_response_text</span>(<span class="hljs-params">response, upstream_domain, host_name</span>) &#123;<br>  <span class="hljs-keyword">let</span> text = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>()<br> <br>  <span class="hljs-keyword">var</span> i, j<br>  <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> replace_dict) &#123;<br>    j = replace_dict[i]<br> <br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>      i = upstream_domain<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>      i = host_name<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>      j = upstream_domain<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>      j = host_name<br>    &#125;<br> <br>    <span class="hljs-keyword">let</span> re = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(i, <span class="hljs-string">&#x27;g&#x27;</span>)<br>    text = text.<span class="hljs-title function_">replace</span>(re, j)<br>  &#125;<br>  <span class="hljs-keyword">return</span> text<br>&#125;<br> <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">device_status</span>(<span class="hljs-params">user_agent_info</span>) &#123;<br>  <span class="hljs-keyword">var</span> agents = [<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-string">&quot;SymbianOS&quot;</span>, <span class="hljs-string">&quot;Windows Phone&quot;</span>, <span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>]<br>  <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v = <span class="hljs-number">0</span>; v &lt; agents.<span class="hljs-property">length</span>; v++) &#123;<br>    <span class="hljs-keyword">if</span> (user_agent_info.<span class="hljs-title function_">indexOf</span>(agents[v]) &gt; <span class="hljs-number">0</span>) &#123;<br>      flag = <span class="hljs-literal">false</span><br>      <span class="hljs-keyword">break</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag<br>&#125;<br></code></pre></td></tr></table></figure><p>点击 <code>部署</code> 即可。然后你就会发现这些链接都打不开。</p><p>你可以自定义一个域名，前提是你有域名，我推荐去 <a href="http://register.us.kg">register.us.kg</a>，免费注册域名。</p><h3 id="域名注册">域名注册</h3><p>首先你得注册一个账号吧。</p><p><img src="https://s21.ax1x.com/2024/08/12/pApK5J1.png" alt=""></p><p>我这里排版有点乱不过没关系。这些个人信息你可以去<a href="https://www.ssnzk.com/">这个网站</a>生成一个。</p><p>像我就是这样</p><p><img src="https://s21.ax1x.com/2024/08/12/pApKIRx.png" alt=""></p><p>把这些信息像我这样填进去。邮箱用自己的，填完不要丢，这些名字、电话号码、街道什么的还要用。</p><p><img src="https://s21.ax1x.com/2024/08/12/pApK7QK.png" alt=""></p><p>这边邮箱填错了，后来我改回自己的邮箱了。</p><p>注意街道需要有两个英文逗号，电话号码去掉 <code>-</code> 加上前缀 <code>+1-</code>。</p><p>这边人机验证后注册，去收邮件，登录。</p><p><img src="https://s21.ax1x.com/2024/08/12/pApMpSP.png" alt=""></p><p>这里点击选择框，选择最下面的。</p><p><img src="https://s21.ax1x.com/2024/08/12/pApMCy8.png" alt=""></p><p>点击 <code>Proceed to Default Server (Click me to redirect KYC Page)</code>。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/a222e5d5925d4a23.png" alt=""></p><p>注册原因填 <code>setup a website</code> 做一个网站。下面一个空填 <code>work ID</code>。</p><p>还记得我让你记住身份吗？随便去一个比如说洛谷云剪贴板，总之就是可以打字并且背景是白色的地方。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/2ddbecaeb294c1ad.png" alt=""></p><p>像我这样截图，上传，点击 <code>submit</code>。</p><p>回到主站，你就会发现登录好了。</p><p>点击左侧菜单栏的 <code>Domain Registration</code>，输入你想要的域名，点击 <code>check</code>，如果没有被人注册，就是这个样子。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/c246ebdcc8f2605b.png" alt=""></p><p>前往 <a href="http://dash.cloudflare.com">dash.cloudflare.com</a>。点击右上角的 <code>添加站点</code>。把域名输入进去。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/619582392dbc67d6.png" alt=""></p><p>计划选择免费，因为我没钱，DNS 记录先不用管，一路继续，到了这个地方。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/dc2a05a0d90e63fd.png" alt=""></p><p>把两个服务器复制下来，粘贴到刚刚的 <a href="http://register.us.kg">register.us.kg</a>。</p><p><img src="https://s3.bmp.ovh/imgs/2024/08/12/2110b83ac73d37db.png" alt=""></p><p>点击 <code>Register</code> 就好了。这个域名可以给你用一年，你可以在离到期还有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>180</mn></mrow><annotation encoding="application/x-tex">180</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">180</span></span></span></span> 天的时候免费续订。就是在 <code>Dashboard</code> -&gt; <code>Manage my domains</code> 点击你要续订的域名，下拉点击 <code>Renew (if there's less than 180 days left until expiry)</code> 即可。</p><p>回到 cloudflare，点击 <code>设置</code> -&gt; <code>触发器</code>，点击 <code>添加自定义域</code>，输入你的域名，最后点击 <code>添加自定义域</code> 就好了。</p><p><a href="https://imgse.com/i/pApPXIU"><img src="https://s21.ax1x.com/2024/08/11/pApPXIU.png" alt="pApPXIU.png"></a></p><p>可能你会发现你的证书还不是有效的，不要慌，过一会就好了。</p><p>打开我们的域，可以发现下载什么的也是完全可用……吧。</p><p><img src="https://s21.ax1x.com/2024/08/11/pApPxG4.png" alt="pApPxG4.png"></p><p>只是偶尔有些慢而已。</p><p>参考：</p><ol><li><p><a href="https://www.bilibili.com/read/cv36206669/?from=search&amp;spm_id_from=333.337.0.0">2024两种永久免费域名，手快有手慢无，可托管CF，零失败率，解决所有问题</a></p></li><li><p><a href="https://blog.csdn.net/weixin_60451356/article/details/136106548?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172333668216800186540846%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=172333668216800186540846&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-136106548-null-null.142%5Ev100%5Epc_search_result_base2&amp;utm_term=cloudflare%20workers&amp;spm=1018.2226.3001.4187">利用Cloudflare workers反代github</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何有一个hexo博客</title>
    <link href="/2024/10/05/have-a-hexo-blog/"/>
    <url>/2024/10/05/have-a-hexo-blog/</url>
    
    <content type="html"><![CDATA[<p>此文章使用 <code>windows</code> 系统介绍。</p><h1>你需要：</h1><ul><li>Git</li><li>Nodejs(建议使用12.0及以上版本，推荐12.22.12版本)</li><li>没了</li></ul><h2 id="如何安装">如何安装</h2><h3 id="Nodejs">Nodejs</h3><p>打开这个<a href="https://nodejs.org/download/release/v12.22.12/">链接</a>，点击 <code>node-v12.22.12-x64.msi</code> 就可以下载 <code>Nodejs</code> 了。</p><h3 id="Git">Git</h3><p>打开这个<a href="https://git-scm.com/">链接</a>，点击右侧电脑，就可以下载 <code>Git</code> 了。</p><h1>安装hexo</h1><p>打开 <code>Git Bash</code>，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo<br></code></pre></td></tr></table></figure><p>就可以安装 <code>hexo</code>。</p><h1>建站</h1><p>安装 <code>hexo</code> 后，新建一个文件夹用于建站，进入文件夹，右键并点击 <code>Git Bash Here</code>，输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init<br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><code>hexo</code> 就会在这个文件夹里新建需要的文件。</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br><span class="hljs-string">|   ├───drafts</span><br><span class="hljs-string">|   └───posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h2 id="config-yml">_config.yml</h2><p>网站的配置信息，在本教程中这个会用到。</p><h2 id="package-json">package.json</h2><p>应用程序的信息。<code>EJS</code>，<code>Stylus</code> 和 <code>Markdown</code> 渲染引擎已默认安装，您可以自由移除。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">package</span>.json<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hexo-site&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;hexo&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;hexo&quot;</span>: <span class="hljs-string">&quot;^3.8.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-archive&quot;</span>: <span class="hljs-string">&quot;^0.1.5&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-category&quot;</span>: <span class="hljs-string">&quot;^0.1.3&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-index&quot;</span>: <span class="hljs-string">&quot;^0.2.1&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-generator-tag&quot;</span>: <span class="hljs-string">&quot;^0.2.0&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-ejs&quot;</span>: <span class="hljs-string">&quot;^0.3.1&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-stylus&quot;</span>: <span class="hljs-string">&quot;^0.3.3&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-renderer-marked&quot;</span>: <span class="hljs-string">&quot;^0.3.2&quot;</span>,<br>    <span class="hljs-string">&quot;hexo-server&quot;</span>: <span class="hljs-string">&quot;^0.3.3&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在本教程中这个屁用没有。</p><h2 id="scaffolds">scaffolds</h2><p>模版文件夹。当您新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来创建文件。</p><p><code>Hexo</code> 的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改 <code>scaffold/post.md</code> 中的 <code>Front-matter</code> 内容，那么每次新建一篇文章时都会包含这个修改。</p><p>在本教程中这个屁用没有。</p><h2 id="source">source</h2><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h2 id="themes">themes</h2><p>主题文件夹。Hexo 会根据主题来生成静态页面。</p><h1>访问</h1><p>你可以输入以下命令来访问你的博客。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo s<br></code></pre></td></tr></table></figure><p>然后打开网址为 <code>http://localhost:4000/</code> 的网站来访问，<code>Git Bash</code> 输入 <code>Ctrl+C</code> 关闭。</p><h1>配置</h1><p>打开 <code>_config.yml</code>，有这些主要东西：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>titie</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词</td></tr><tr><td><code>author</code></td><td>你的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言，本教程需要改成 <code>zh-CN</code></td></tr><tr><td><code>timezone</code></td><td>网站时区。本教程需要改成 <code>Asia/Shanghai</code></td></tr></tbody></table><p>其中，<code>description</code> 主要用于 <code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者。</p><h1>迁移</h1><h2 id="创建仓库">创建仓库</h2><p>打开 <code>Github-&gt;Settings-&gt;Repositories</code>，更改 <code>main</code> 为 <code>master</code>，点击 <code>Update</code>。</p><p>新建一个仓库，名为 <code>你的用户名.github.io</code>。</p><h2 id="生成-SSH">生成 SSH</h2><p>打开 <code>git bash</code>，输入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的Github用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的Github注册用的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的Github注册用的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>一直回车（注意有一个地方需要输入 <code>y</code>），找到 <code>.ssh</code> 文件夹，用 <code>txt</code> 打开 <code>id_rsa.pub</code>，复制里面的东西，然后回到 <code>Github-&gt;Settings-&gt;SSH and GPG keys</code>，新建一个 <code>SSH</code>，名字随便，把复制的内容粘贴进去。</p><p><code>Git Bash</code> 输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>查看是否成功。</p><h2 id="部署到Github">部署到Github</h2><p>打开 <code>_config.yml</code>，把最后几行改成这样子：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:GitHub用户名/Github用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>之后保存，<code>Git Bash</code> 输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo clean<br>hexo <span class="hljs-selector-tag">g</span><br>hexo d<br></code></pre></td></tr></table></figure><p>（注：以后一旦博客有改动都用这个命令更新）</p><p>部署到 <code>Github</code>，等待一会，就可以用 <code>Github用户名.github.io</code> 这个网址访问你的博客了，如 <a href="zhuangjihong.github.io">zhuangjihong.github.io</a>.</p><h1>主题</h1><p><code>hexo</code> 默认的主题不好看，所以我们可以换一个，我用的是 <code>fluid</code>。</p><h2 id="安装">安装</h2><p>把 <code>_config.yml</code> 中 <code>theme</code> 后的 <code>landscape</code> 改成 <code>fluid</code>。</p><p>下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid最新版本</a>，解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。进入 <code>fluid</code> 文件夹，打开这个文件夹中的 <code>_config.yml</code> 文件，复制里面的内容，再在你用于部署博客的文件夹（也就是有 <code>source</code> 文件夹的文件夹）里新建一个 <code>_config.fluid.yml</code> 文件，打开，粘贴复制的内容，可以自定义一些比如说标题、背景图等参数，详见<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">fluid配置指南</a>。保存后运行前面提到过用于更新的命令，就可以看到效果了。</p><h1>写文章</h1><p>用 <code>Git Bash</code> 输入 <code>hexo new &quot;文章题目&quot;</code> 即可在 <code>source -&gt; _post</code> 文件夹里看到创建的文章，选择一个编辑器如 <code>VScode</code> 来编辑文章。</p><p>文章是 <code>.md</code> 类型的，也就是要用 <code>Markdown</code> 来编辑，关于 <code>Markdown</code> 的使用详见 <a href="http://www.markdown.cn/">Markdown教程</a>。</p><p>在文章的前 5 行可以看到这些东西：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章题目</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">xxxx-xx-xx</span> <span class="hljs-string">xx:xx:xx</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>其中 <code>date</code> 是文章创建的日期，<code>tags</code> 是文章的标签，除此之外，你还可以添加 <code>categories:</code> 即文章的分类，注意冒号后有空格。</p><p>写好文章后仍然使用用于更新的命令上传文章。</p>]]></content>
    
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Better Luogu!(插件版)</title>
    <link href="/2024/10/04/How-to-use-Better-Luogu/"/>
    <url>/2024/10/04/How-to-use-Better-Luogu/</url>
    
    <content type="html"><![CDATA[<h1>下载Better Luogu!插件</h1><p>从<a href="http://www.volatile.byethost16.com/">这个地方</a>下载Better Luogu!插件版。</p><p>下载后解压，添加到Chrome扩展程序中。</p><h1>功能</h1><p>和<a href="https://www.volatiles.us.kg/">Better Luogu!</a>大差不差。</p><h1>优点</h1><p>加载速度更快，功能<s>更多</s>反而少了</p><h1>缺点</h1><p>如上，少了热搜。</p><h1>Q&amp;A</h1><p>Q: Better Luogu!哪些浏览器可以用？</p><p>A: 以Chromium为内核的浏览器，可能吧（</p><p>Q: BETTER 框呢？</p><p>A: 直接点击扩展中的图标即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/07/hello-world/"/>
    <url>/2024/09/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
